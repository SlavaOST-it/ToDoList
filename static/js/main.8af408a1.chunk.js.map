{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","StatusCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","authReducer","reducer","actions","isInitialized","setInitializedAC","appReducer","removeTaskAC","tasks","index","findIndex","t","splice","addTaskAC","task","todoListId","unshift","updateTaskAC","setTasksAC","extraReducers","builder","addCase","addTodolistAC","todolist","removeTodolistAC","setTodolistsAC","todolists","forEach","tl","tasksReducer","fetchTasks","res","items","updateTaskTC","domainModel","getState","find","console","warn","apiModel","deadline","description","priority","startDate","resultCode","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","map","todolistsReducer","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","todos","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","OK","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","handleChange","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8af408a1.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'dd070108-da2d-47ec-bd5a-e22f291be6bf'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(`/auth/login`, data)\r\n    },\r\n    logOut(){\r\n        return instance.delete<ResponseType>(`/auth/login`)\r\n    },\r\n\r\n    me() {\r\n        return instance.get<ResponseType<MeType>>(`/auth/me`)\r\n    },\r\n\r\n}\r\n\r\n\r\n// types\r\nexport type MeType = {\r\n    id: number,\r\n    email: string ,\r\n    login: string\r\n}\r\nexport type LoginParamsType ={\r\n    email: string\r\n    password:string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum StatusCode {\r\n    OK = 0,\r\n    ERROR = 1,\r\n    CAPTCHA = 10,\r\n\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType, StatusCode} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    const res = await authAPI.login(data)\r\n    try {\r\n        if (res.data.resultCode === StatusCode.OK) {\r\n            dispatch(setIsLoggedIn({value: true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n}\r\n\r\nexport const logOutTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await authAPI.logOut()\r\n    try {\r\n        if (res.data.resultCode === StatusCode.OK) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(setIsLoggedIn({value: false}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedIn>","import {authAPI, StatusCode} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setInitializedAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC, setInitializedAC} = slice.actions\r\n\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n    const res = await authAPI.me()\r\n    try {\r\n        if (res.data.resultCode === StatusCode.OK) {\r\n            dispatch(setIsLoggedIn({value: true}));\r\n            dispatch(setInitializedAC({value: true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    } finally {\r\n        dispatch(setInitializedAC({value: true}))\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n// export const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n// export const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n// export const setInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type InitializedActionType = ReturnType<typeof setInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | InitializedActionType\r\n","import {\r\n    addTodolistAC,\r\n    AddTodolistActionType, removeTodolistAC,\r\n    RemoveTodolistActionType, setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks.splice(index, 1)\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.model}\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n\r\n    },\r\n\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTasks = (todolistId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    dispatch(setTasksAC({tasks, todolistId}))\r\n    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    const res = await todolistsAPI.deleteTask(todolistId, taskId)\r\n    dispatch(removeTaskAC({taskId, todolistId}))\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            const action = addTaskAC({task})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        const res = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                dispatch(action)\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n        }\r\n    }\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {fetchTasks} from \"./tasks-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl=> tl.id === action.payload.id)\r\n            if (index > -1) state.splice(index, 1)\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{id: string, title: string}>) {\r\n            const index = state.findIndex(tl=> tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(tl=> tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl=> tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{todolists: Array<TodolistType>}>) {\r\n           return  action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n    setTodolistsAC\r\n} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return res.data\r\n            }).then((todos) => {\r\n            todos.forEach((tl) => {\r\n                dispatch(fetchTasks(tl.id))\r\n            })\r\n        })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasks } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasks(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({filter: value, id: todolistId})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    // проверка на логинизацию\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password to be minimum 3 symbol'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn){\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                name={'rememberMe'}\r\n                                onChange={formik.handleChange}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button\r\n                            type={'submit'}\r\n                            variant={'contained'}\r\n                            color={'primary'}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logOutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && < Button onClick={()=>dispatch(logOutTC())} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path={'/404'} element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path={'*'} element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}